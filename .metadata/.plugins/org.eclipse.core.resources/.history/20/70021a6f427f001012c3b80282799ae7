package com.securenetbank.controller;

import com.securenetbank.model.Account;
import com.securenetbank.model.Transaction;
import com.securenetbank.service.AccountService;

import jakarta.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;

@Controller
public class BankController {

    @Autowired
    private AccountService accountService;

    // Guest or logged-in user home
    @GetMapping("/")
    public String home(HttpSession session) {
        String currentUser = (String) session.getAttribute("currentUser");
        if (currentUser != null) {
            return "redirect:/accounts";
        }
        return "home";
    }


    @GetMapping("/login")
    public String loginForm(HttpSession session) {
        if (session.getAttribute("currentUser") != null) {
            return "redirect:/accounts";
        }
        return "login";
    }

    @PostMapping("/login")
    public String login(@RequestParam("accNo") String accNo,
                        @RequestParam("name") String name,
                        HttpSession session,
                        Model model) {

        Account account = accountService.getAccount(accNo);

        if (account != null && account.getHolderName().equals(name)) {
            session.setAttribute("currentUser", account.getHolderName());
            session.setAttribute("currentAccount", account.getAccountNumber());
            return "redirect:/accounts";
        } else {
            model.addAttribute("error", "Invalid account number or name!");
            return "login";
        }
    }

    

    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/login";
    }

    @GetMapping("/accounts")
    public String accounts(HttpSession session, Model model) {
        String currentUser = (String) session.getAttribute("currentUser"); // logged-in user

        if (currentUser == null) {
            model.addAttribute("message", "Please login first!");
            return "login"; // redirect to login
        }

        // Get only the account of the logged-in user
        Account userAccount = null;
        for (Account acc : accountService.getAllAccounts()) { // no .values()
            if (acc.getHolderName().equals(currentUser)) {
                userAccount = acc;
                break;
            }
        }

        model.addAttribute("accounts", Arrays.asList(userAccount)); // pass as list
        model.addAttribute("title", "Your Accounts");
        return "accounts"; // accounts.html
    }


    @GetMapping("/transactions")
    public String transactions(HttpSession session, Model model) {
        String currentUser = (String) session.getAttribute("currentUser");
        if (currentUser == null) return "redirect:/login";

        model.addAttribute("transactions", accountService.getTransactionsForUser(currentUser));
        model.addAttribute("title", "Transaction History");
        return "transactions";
    }

    @GetMapping("/transfer")
    public String transferForm(HttpSession session, Model model) {
        if (session.getAttribute("currentUser") == null) return "redirect:/login";
        model.addAttribute("title", "Money Transfer");
        return "transfer";
    }

    @PostMapping("/transfer")
    public String doTransfer(@RequestParam String fromAcc,
                             @RequestParam String toAcc,
                             @RequestParam double amount,
                             HttpSession session,
                             Model model) {

        if (session.getAttribute("currentUser") == null) return "redirect:/login";

        if (fromAcc.length() != 12 || toAcc.length() != 12) {
            model.addAttribute("message", "Account numbers must be exactly 12 digits.");
            model.addAttribute("title", "Money Transfer");
            return "transfer";
        }

        boolean success = accountService.transfer(fromAcc, toAcc, amount);
        model.addAttribute("message", success ? "Transfer Successful!" : "Transfer Failed. Check balance or account numbers.");
        model.addAttribute("title", "Money Transfer");
        return "transfer";
    }
}
